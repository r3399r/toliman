{"version":3,"sources":["pages/hw/Hw.module.scss","pages/hw/Hw.tsx","services/questionService.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","component/GridWith2Col.tsx","component/GridWith2Col.module.scss"],"names":["module","exports","Hw","addDefaultSrc","ev","target","src","className","style","content","getQuestions","map","q","i","undefined","qqq","hasImage","img","id","alt","role","onError","text","question","answer","ans","questionsByKey","getAllQuestions","lodash","keyBy","bank","getQuestion","ids","allQuestions","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Homework","children","grid","child","classNames","card","left"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,QAAU,oBAAoB,IAAM,gBAAgB,IAAM,kB,iCCA5E,4DAqDeC,UA/CJ,WACT,IAeMC,EAAgB,SAACC,GACrBA,EAAGC,OAAOC,IAAM,0BAGlB,OACE,qBAAKC,UAAWC,IAAMC,QAAtB,SACE,cAAC,IAAD,UACGC,YAtBe,CACpB,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,gBAUuBC,KAAI,SAACC,EAAaC,GACnC,YAAUC,IAANF,EAAwB,gDAAqCC,EAArC,oCAAkBA,IAG5C,sBAAgBN,UAAWC,IAAMO,IAAjC,WACkB,IAAfH,EAAEI,UACD,qBACET,UAAWC,IAAMS,IACjBX,IAAG,0BAAqBM,EAAEM,GAAvB,QACHC,IAAI,GACJC,KAAK,eACLC,QAASlB,IAGb,cAAC,IAAD,CAAkBmB,KAAI,UAAKT,EAAI,EAAT,aAAeD,EAAEW,YACvC,cAAC,IAAD,CAAkBD,KAAI,eAAUV,EAAEY,QAAUjB,UAAWC,IAAMiB,QAXrDb,EAAEM,a,gCClCxB,wEAGIQ,EAHJ,yBAKaC,EAAkB,WAG7B,YAFuBb,IAAnBY,IAA8BA,EAAiBE,IAAOC,MAAMC,IAAM,OAE/DJ,GAGIK,EAAc,SAACb,GAG1B,OAFqBS,IAEDT,IAGTR,EAAe,SAACsB,GAC3B,IAAMC,EAAeN,IAErB,OAAOK,EAAIrB,KAAI,SAACO,GAAD,OAAgBe,EAAaf,Q,gCCpB/B,SAASgB,EAAgBC,EAAKC,EAAKC,GAYhD,OAXID,KAAOD,EACTG,OAAOC,eAAeJ,EAAKC,EAAK,CAC9BC,MAAOA,EACPG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZP,EAAIC,GAAOC,EAGNF,EAZT,mC,qFCyBeQ,IAjBE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAClB,OACE,qBAAKrC,UAAWC,IAAMqC,KAAtB,SACGD,EAASjC,KAAI,SAACmC,EAAkBjC,GAAnB,OACZ,qBAEEN,UAAWwC,IAAWvC,IAAMwC,KAAP,eAClBxC,IAAMyC,KAAOpC,EAAI,IAAM,IAH5B,SAMGiC,GALIjC,U,mBCZfb,EAAOC,QAAU,CAAC,KAAO,2BAA2B,KAAO,2BAA2B,KAAO","file":"static/js/31.7199850d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Hw_content__3ny0i\",\"ans\":\"Hw_ans__3Xbfq\",\"img\":\"Hw_img__mNkXQ\"};","import { ChangeEvent } from 'react';\nimport GridWith2Col from 'src/component/GridWith2Col';\nimport Textarea2MathJax from 'src/component/Textarea2MathJax';\nimport { Question } from 'src/model/bank';\nimport { getQuestions } from 'src/services/questionService';\nimport style from './Hw.module.scss';\n\nconst Hw = () => {\n  const ids: string[] = [\n    '17be21e2d87',\n    '17be2299264',\n    '17be2224b98',\n    '17be240b49d',\n    '17be23101fb',\n    '17be22df448',\n    '17be21bee6a',\n    '17be22560e0',\n    '17be233d0b5',\n    '17be232a1db',\n    '17be23827ca',\n    '17be23b551a',\n  ];\n\n  const addDefaultSrc = (ev: ChangeEvent<HTMLImageElement>) => {\n    ev.target.src = '/toliman/images/09.PNG';\n  };\n\n  return (\n    <div className={style.content}>\n      <GridWith2Col>\n        {getQuestions(ids).map((q: Question, i: number) => {\n          if (q === undefined) return <div key={`error${i}`}>ERROR! id at {i} does not exists</div>;\n\n          return (\n            <div key={q.id} className={style.qqq}>\n              {q.hasImage === true && (\n                <img\n                  className={style.img}\n                  src={`/toliman/images/${q.id}.PNG`}\n                  alt=\"\"\n                  role=\"presentation\"\n                  onError={addDefaultSrc}\n                />\n              )}\n              <Textarea2MathJax text={`${i + 1}. ${q.question}`} />\n              <Textarea2MathJax text={`Ans: ${q.answer}`} className={style.ans} />\n            </div>\n          );\n        })}\n      </GridWith2Col>\n    </div>\n  );\n};\n\nexport default Hw;\n","import lodash from 'lodash';\nimport { bank, Question } from 'src/model/bank';\n\nlet questionsByKey: { [key: string]: Question };\n\nexport const getAllQuestions = (): { [key: string]: Question } => {\n  if (questionsByKey === undefined) questionsByKey = lodash.keyBy(bank, 'id');\n\n  return questionsByKey;\n};\n\nexport const getQuestion = (id: string): Question | undefined => {\n  const allQuestions = getAllQuestions();\n\n  return allQuestions[id];\n};\n\nexport const getQuestions = (ids: string[]): Question[] => {\n  const allQuestions = getAllQuestions();\n\n  return ids.map((id: string) => allQuestions[id]);\n};\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import classNames from 'classnames';\nimport { ReactNode, ReactNodeArray } from 'react';\nimport style from './GridWith2Col.module.scss';\n\ntype Props = {\n  children: ReactNodeArray;\n};\n\nconst Homework = ({ children }: Props) => {\n  return (\n    <div className={style.grid}>\n      {children.map((child: ReactNode, i: number) => (\n        <div\n          key={i}\n          className={classNames(style.card, {\n            [style.left]: i % 2 === 0,\n          })}\n        >\n          {child}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Homework;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"GridWith2Col_grid__2PI2q\",\"left\":\"GridWith2Col_left__zc8Ia\",\"card\":\"GridWith2Col_card__3hLmH\"};"],"sourceRoot":""}