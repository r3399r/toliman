{"version":3,"sources":["pages/projection/Projection.module.scss","pages/projection/Projection.tsx","component/Textarea2MathJax.tsx","services/questionService.ts"],"names":["module","exports","Projection","q","getQuestion","undefined","className","style","content","hasImage","img","src","id","alt","role","font","text","question","Textarea2MathJax","split","map","line","index","questionsByKey","getAllQuestions","lodash","keyBy","bank","getQuestions","ids","allQuestions"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,IAAM,wBAAwB,IAAM,wBAAwB,KAAO,2B,iCCA3H,oDAuBeC,UAlBI,WACjB,IAEMC,EAA0BC,YADb,eAGnB,YAAUC,IAANF,EAAwB,qBAAKG,UAAWC,IAAMC,QAAtB,gCAG1B,sBAAKF,UAAWC,IAAMC,QAAtB,WAEkB,IAAfL,EAAEM,UACD,qBAAKH,UAAWC,IAAMG,IAAKC,IAAG,0BAAqBR,EAAES,GAAvB,QAAiCC,IAAI,GAAGC,KAAK,iBAE7E,cAAC,IAAD,CAAkBR,UAAWC,IAAMQ,KAAMC,KAAI,UAAKb,EAAEc,iB,2CCF3CC,IAZU,SAAC,GAAD,IAAGZ,EAAH,EAAGA,UAAWU,EAAd,EAAcA,KAAd,OACvB,mCACGA,EAAKG,MAAM,MAAMC,KAAI,SAACC,EAAcC,GACnC,OACE,qBAAiBhB,UAAWA,EAA5B,SACE,8BAAMe,KADEC,U,gCCTlB,wEAGIC,EAHJ,yBAKaC,EAAkB,WAG7B,YAFuBnB,IAAnBkB,IAA8BA,EAAiBE,IAAOC,MAAMC,IAAM,OAE/DJ,GAGInB,EAAc,SAACQ,GAG1B,OAFqBY,IAEDZ,IAGTgB,EAAe,SAACC,GAC3B,IAAMC,EAAeN,IAErB,OAAOK,EAAIT,KAAI,SAACR,GAAD,OAAgBkB,EAAalB","file":"static/js/61.fb4a148d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Projection_content__k_yzZ\",\"num\":\"Projection_num__1132-\",\"img\":\"Projection_img__2Pe6o\",\"font\":\"Projection_font__13IYB\"};","import classNames from 'classnames';\nimport Textarea2MathJax from 'src/component/Textarea2MathJax';\nimport { Question } from 'src/model/bank';\nimport { getQuestion } from 'src/services/questionService';\nimport style from './Projection.module.scss';\n\nconst Projection = () => {\n  const num: string = 'hw1';\n  const id: string = '17f7321aa31';\n  const q: Question | undefined = getQuestion(id);\n\n  if (q === undefined) return <div className={style.content}>Question Not Found</div>;\n\n  return (\n    <div className={style.content}>\n      {/* <div className={classNames(style.num, style.font)}>{num}</div> */}\n      {q.hasImage === true && (\n        <img className={style.img} src={`/toliman/images/${q.id}.PNG`} alt=\"\" role=\"presentation\" />\n      )}\n      <Textarea2MathJax className={style.font} text={`${q.question}`} />\n    </div>\n  );\n};\n\nexport default Projection;\n","type Props = {\n  text: string;\n  className?: string;\n};\n\nconst Textarea2MathJax = ({ className, text }: Props) => (\n  <>\n    {text.split('\\n').map((line: string, index: number) => {\n      return (\n        <div key={index} className={className}>\n          <div>{line}</div>\n        </div>\n      );\n    })}\n  </>\n);\n\nexport default Textarea2MathJax;\n","import lodash from 'lodash';\nimport { bank, Question } from 'src/model/bank';\n\nlet questionsByKey: { [key: string]: Question };\n\nexport const getAllQuestions = (): { [key: string]: Question } => {\n  if (questionsByKey === undefined) questionsByKey = lodash.keyBy(bank, 'id');\n\n  return questionsByKey;\n};\n\nexport const getQuestion = (id: string): Question | undefined => {\n  const allQuestions = getAllQuestions();\n\n  return allQuestions[id];\n};\n\nexport const getQuestions = (ids: string[]): Question[] => {\n  const allQuestions = getAllQuestions();\n\n  return ids.map((id: string) => allQuestions[id]);\n};\n"],"sourceRoot":""}